# SPDX-FileCopyrightText: 2024 Christina SÃ¸rensen
# SPDX-License-Identifier: EUPL-1.2
name: Cross Build (UNIX)
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  workflow_run:
    workflows: ["Test with Code Coverage"]
    branches: [main]
    types:
      - completed

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: --deny warnings

jobs:
  security_audit:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@cargo-deny
      - name: Scan for vulnerabilities
        run: cargo deny check

  check_if_pr:
    runs-on: ubuntu-latest
    outputs:
      is_pr: ${{ steps.check.outputs.is_pr }}

    steps:
      - name: Check if it's a PR
        id: check
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "is_pr=true" >> $GITHUB_OUTPUT
          else
            echo "is_pr=false" >> $GITHUB_OUTPUT
          fi
  no-merge-commits:
    needs: check_if_pr
    if: needs.check_if_pr.outputs.is_pr == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run test
        uses: NexusPHP/no-merge-commits@v2.2.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  conventional:
    needs: [check_if_pr, no-merge-commits]
    name: Conventional Commits
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: webiny/action-conventional-commits@v1.3.0

  freebsd:
    needs: conventional
    runs-on: ubuntu-latest
    timeout-minutes: 20
    continue-on-error: ${{ matrix.rust == 'nightly' }}
    env:
      GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      NEXTEST_PROFILE: coverage # defined in .config/nextest.toml
    strategy:
      matrix:
        rust: [nightly]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Compile
        uses: vmactions/freebsd-vm@v1
        with:
          release: "14.3"
          usesh: true
          envs: "GITHUB_TOKEN NEXTEST_PROFILE"
          prepare: |
            pkg install -y curl git
            curl --proto '=https' --tlsv1.3 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain ${{ matrix.rust }} --profile minimal -y
            . ~/.cargo/env
            rustup component add rustfmt
            cargo install cargo-hack
          run: |
            set -e
            . ~/.cargo/env
            export CARGO_TERM_COLOR="always"
            export RUSTFLAGS="--deny warnings"
            cargo hack test

  netbsd:
    needs: conventional
    runs-on: ubuntu-latest
    timeout-minutes: 20
    continue-on-error: ${{ matrix.rust == 'nightly' }}
    env:
      GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      NEXTEST_PROFILE: coverage # defined in .config/nextest.toml
    strategy:
      matrix:
        rust: [nightly]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Compile
        uses: vmactions/netbsd-vm@v1
        with:
          release: "10.1"
          usesh: true
          envs: "GITHUB_TOKEN NEXTEST_PROFILE"
          prepare: |
            PATH="/root/.cargo/bin:/usr/pkg/sbin:/usr/pkg/bin:$PATH"
            PKG_PATH="https://ftp.netbsd.org/pub/pkgsrc/packages/NetBSD/amd64/10.1/All/"
            export PATH PKG_PATH
            /usr/sbin/pkg_add curl git
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain ${{ matrix.rust }} --profile minimal -y
            . ~/.cargo/env
            cargo install cargo-hack
          run: |
            set -e
            . ~/.cargo/env
            export CARGO_TERM_COLOR="always"
            export RUSTFLAGS="--deny warnings"
            cargo hack test
