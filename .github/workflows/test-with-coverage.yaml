# SPDX-FileCopyrightText: 2025 yonasBSD
#
# SPDX-License-Identifier: MIT

on:
  pull_request:
  push:
    branches:
      - main

name: Test with Code Coverage

permissions:
  contents: write
  issues: read
  checks: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always

jobs:
  e2e:
    name: End-to-End Testing
    env:
      PROJECT_NAME_UNDERSCORE: github-rs
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort
      RUSTDOCFLAGS: -Cpanic=abort
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@nightly

      - name: Cache dependencies
        uses: actions/cache@v4
        env:
          cache-name: cache-dependencies
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            target
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}

      - name: Run BDD end-to-end tests
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
        run: |
          cargo test --package github-rs-e2e -- --color=always

  coverage:
    name: Code Coverage
    env:
      PROJECT_NAME_UNDERSCORE: github-rs
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort
      RUSTDOCFLAGS: -Cpanic=abort
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: llvm-tools-preview

      - name: Cache dependencies
        uses: actions/cache@v4
        env:
          cache-name: cache-dependencies
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            target
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}

      - name: Install grcov, cargo-llvm-cov and nextest
        uses: taiki-e/install-action@v2
        with:
          tool: grcov,cargo-llvm-cov,nextest

      - name: Set env
        run: echo "CARGO2JUNIT_VERSION=$(curl -sL https://api.github.com/repos/yonasBSD/cargo2junit/releases/latest | jq -r ".tag_name" | cut -d'v' -f2)" >> $GITHUB_ENV

      - name: Generate test result and coverage report
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
          NEXTEST_PROFILE: coverage # defined in .config/nextest.toml
        run: |
          wget https://github.com/yonasBSD/cargo2junit/releases/download/v${CARGO2JUNIT_VERSION}/cargo2junit_${CARGO2JUNIT_VERSION}_amd64.deb
          sudo dpkg -i cargo2junit_${CARGO2JUNIT_VERSION}_amd64.deb
          rm cargo2junit_${CARGO2JUNIT_VERSION}_amd64.deb
          cargo clean
          cargo test --package github-rs-lib $CARGO_OPTIONS -- -Z unstable-options --format json | cargo2junit > results.xml;
          cargo llvm-cov nextest --package github-rs-lib --codecov --output-path ./codecov.json

      # TODO: Only test the github-rs-lib package
      - name: Run xtask coverage (grcov)
        uses: actions-rs/cargo@v1
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
        with:
          command: xtask
          args: coverage

      - name: Upload test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_name: Test Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: results.xml

      - name: Upload CodeCov coverage report
        uses: codecov/codecov-action@v5
        with:
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ github.workspace }}/codecov.json

      - name: Upload Codacy coverage report
        uses: codacy/codacy-coverage-reporter-action@a38818475bb21847788496e9f0fddaa4e84955ba # v1.3.0
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          # or
          # api-token: ${{ secrets.CODACY_API_TOKEN }}
          coverage-reports: coverage/*.lcov
          # or a comma-separated list for multiple reports
          # coverage-reports: <PATH_TO_REPORT>, <PATH_TO_REPORT>
