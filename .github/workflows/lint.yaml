# SPDX-FileCopyrightText: 2025 yonasBSD
#
# SPDX-License-Identifier: MIT

name: Linting

on:
  workflow_call:
  pull_request:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

jobs:
  fmt:
    name: Rustfmt, Treefmt, Prettier
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
      statuses: write

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          token: ${{ secrets.WORKFLOW_TOKEN }}

      # Run Prettier before codebase changes to avoid
      # commiting artifacts
      - name: Prettier
        uses: AbdulRehman-1/pr-prettier@initial
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
        with:
          commit_message: "fix: Prettified Code!"
          prettier_options: --write **/*.{js,md,yaml,yml}
          github_token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Setup Cache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Install Toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt

      - name: Install Tree Format (treefmt)
        run: |
          curl -s https://api.github.com/repos/numtide/treefmt/tags | jq -r '.[0].name' > .ver
          curl -sSLo treefmt.tgz https://github.com/numtide/treefmt/releases/download/$(cat .ver)/treefmt_$(cat .ver | cut -d'v' -f2)_linux_amd64.tar.gz
          tar -xvf treefmt.tgz

      - name: Rust Format (rustfmt)
        run: |
          cargo fmt --version
          cargo fmt --all --check

      - name: Tree Format (treefmt)
        run: ./treefmt

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - uses: mozilla-actions/sccache-action@v0.0.9

      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy

      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all
          name: Clippy Output

  conventional_commits:
    name: Conventional Commit Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Conventional commit check
        uses: cocogitto/cocogitto-action@main

  licenses:
    name: Licenses
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Cache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Check licenses
        uses: yonasBSD/toolkit@main
        with:
          run: |
            git config --global --add safe.directory /github/workspace
            rustup default nightly
            task audit:licenses
